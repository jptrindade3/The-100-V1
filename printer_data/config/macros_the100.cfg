# #############################################
# # START PRINT
# #############################################

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}

    G21 # set units to millimeters
    G90 # Use absolute coordinates
    M82 # absolute extrusion mode

    M140 S{BED_TEMP} # Start bed heating
    M104 S{EXTRUDER_TEMP} # Start nozzle heating
       
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset (adjust Z offset if needed)
    G28 # Home the printer
    SKEW_PROFILE LOAD=my_skew_profile

    M109 S{EXTRUDER_TEMP} # Set and wait for nozzle to reach temperature
    
    # Dá uma retraída no filamento assim que batemos a temperatura esperada do nozzle, pra evitar clogging
    M83 # Relative mode
    G1 E-8 F600
    M82 # Absolute mode
    
    M190 S{BED_TEMP} # Wait for bed to reach temperature
    BED_MESH_CALIBRATE ADAPTIVE=1
    
    G92 E0.0 ; reset extruder distance position
    G1 Y0.0 F1000.0 ; go outside print area
    # G1 X20.0 E10.0 F600.0 ; intro line
    # G1 X80.0 E10.0 F600.0 ; intro line
    
    M83
    G1 E50 F400
    M82
    G92 E0.0 ; reset extruder distance position



# #############################################
# # END PRINT
# #############################################
[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fans 
    M140 S0
    M104 S0
    M106 S0
    M107 S0

    G1 X145 Y160; home X axis and push Y forward

    # Retira o filamento
    M83 # Relative mode
    G1 E-25 F600

    SET_SKEW CLEAR=1 # Disable Skew correction
    
    # Disable steppers
    M84



# ######################################################################
# # Filament Change
# ######################################################################
# # M600: Filament Change. This macro will pause the printer, move the
# # the retraction settings for your own extruder. After filament has
# # been changed, the print can be resumed from its previous position
# # with the "RESUME" gcode.

# [pause_resume]

# [gcode_macro M600]
# gcode:
#     # {% set X = params.X|default(50)|float %}
#     # {% set Y = params.Y|default(0)|float %}
#     {% set Z = params.Z|default(10)|float %}
#     SAVE_GCODE_STATE NAME=M600_state
#     PAUSE
#     G91
#     G1 E-.8 F2700
#     G1 Z{Z}
#     G90
#     G1 X145 Y175 F2000
#     G91
#     G1 E-50 F1000 # tool to the change position, and retract the filament 50mm. Adjust
#     RESTORE_GCODE_STATE NAME=M600_state



# ############################################
# # TOOLHEAD PARK ON PAUSE/CANCEL
# ############################################
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT

  # Define a posição de parking da extrusora
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    # G1 X{x_park} Y{y_park} F{sp_move} 
    G1 X{145} F{sp_move}
    G1 Y{176} F{sp_move}

    # Coloca no modo relativo só pra extrudar o filamento pra traz, evitar clogging
    M83
    G1 E-8 F600
    # Traz pro modo absoluto novamente
    M82
    
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}



# ############################################
# # RESUME PRINTING
# ############################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'

      
      M109 S{last_extruder_temp.temp}
      # Volta o filamento pro lugar
      # Coloca no modo relativo só pra extrudar o filamento pra de volta
      M83
      G1 E8 F600
      # Traz pro modo absoluto novamente
      M82

      
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
  
    # Volta o filamento pro lugar
    # Coloca no modo relativo só pra extrudar o filamento pra de volta
    M83
    G1 E8 F600
    # Traz pro modo absoluto novamente
    M82
    
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
